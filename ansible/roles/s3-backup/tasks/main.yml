---

- name: ensure python-pip is installed
  become: yes
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
    cache_valid_time: "{{ all_apt_cache_valid_time }}"
  with_items:
    - python-pip

- name: ensure boto3 is installed
  become: yes
  pip:
    name: "{{ item }}"
  with_items:
    - boto3

- name: install duplicity
  become: yes
  apt:
    name: "{{ item }}"
    update_cache: yes
    cache_valid_time: "{{ s3_backup_apt_cache_valid_time }}"
  with_items:
    - duplicity
    - s3cmd
    - python
    - python-boto
    - cron

- name: install duplicity-backup.sh
  become: yes
  git:
    repo: "{{ s3_backup_duplicity_backup_sh_git_repository }}"
    dest: "{{ s3_backup_duplicity_backup_sh_install_directory }}"
    version: "{{ s3_backup_duplicity_backup_sh_version }}"

- name: setup duplicity-backup.sh installation
  become: yes
  file:
    src: "{{ s3_backup_duplicity_backup_sh_install_directory }}/{{ s3_backup_duplicity_backup_sh_script_name }}"
    dest: "/usr/local/bin/{{ s3_backup_duplicity_backup_sh_script_name }}"
    state: link

- name: create configuration directory
  become: yes
  file:
    path: "{{ s3_backup_configuration_directory }}"
    state: directory

- name: create s3cmd configuration file
  become: yes
  template:
    src: s3cmd.ini.j2
    dest: "{{ s3_backup_s3cmd_configuration_file }}"
    mode: 0660

- name: create duplicity-backup.sh configuration file
  become: yes
  template:
    src: duplicity-backup-sh.conf.j2
    dest: "{{ s3_backup_duplicity_backup_sh_configuration_file }}"
    mode: 0660

- name: ensure s3 backup bucket exists
  aws_s3:
    mode: create
    rgw: true
    bucket: "{{ s3_backup_s3_bucket }}"
    region: ""
    s3_url: "https://{{ s3_backup_s3_host }}"
    aws_access_key: "{{ s3_backup_s3_access_key }}"
    aws_secret_key: "{{ s3_backup_s3_secret_key }}"

- name: check if restore indicator is present
  stat:
    path: "{{ s3_backup_restore_indicator_file }}"
  register: s3_backup_stat

- name: restore from s3 when restore indicator is present
  block: 
    - name: check if backup path exists in s3
      aws_s3:
        mode: list
        rgw: true
        bucket: "{{ s3_backup_s3_bucket }}"
        region: ""
        s3_url: "https://{{ s3_backup_s3_host }}"
        aws_access_key: "{{ s3_backup_s3_access_key }}"
        aws_secret_key: "{{ s3_backup_s3_secret_key }}"
        prefix: "{{ s3_backup_dest_url | urlsplit('path') | regex_replace('^[/].*?[/](.*)$', '\\1') }}"
        max_keys: 1
      register: s3_backup_REGISTER_s3_backup_path
    - name: restore data from s3
      become: yes
      command: "/usr/local/bin/{{ s3_backup_duplicity_backup_sh_script_name }} -c {{ s3_backup_duplicity_backup_sh_configuration_file }} --restore {{ s3_backup_source_dir }}"
      when: s3_backup_REGISTER_s3_backup_path.s3_keys | count > 0
    - name: delete restore indicator
      become: yes
      file:
        path: "{{ s3_backup_restore_indicator_file }}"
        state: absent
  when: s3_backup_stat.stat.exists

- name: schedule backup using cron
  become: yes
  cron:
    name: "backup {{ s3_backup_source_dir }} to {{ s3_backup_dest_url }}"
    minute: "{{ s3_backup_minute }}"
    hour: "{{ s3_backup_hour }}"
    day: "{{ s3_backup_day }}"
    job: "/usr/local/bin/{{ s3_backup_duplicity_backup_sh_script_name }} -c {{ s3_backup_duplicity_backup_sh_configuration_file }} -b"
