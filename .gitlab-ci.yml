# This script excepts the following Secret Variables to be defined in
# Gitlab project settings:
#  SSH_PRIVATE_KEY (e.g. "-----BEGIN RSA PRIVATE KEY-----
#                         ...
#                         -----END RSA PRIVATE KEY-----)"
variables:
  GITHUB_REPO: "git@github.com:wtsi-hgi/hgi-systems.git"
  GITLAB_REPO: "git@gitlab.internal.sanger.ac.uk:hgi/hgi-systems.git"

stages:
  - sync
  - version
  - prepare
  - plan
  - apply
  - commit

github-sync:
  stage: sync
  tags:
    - docker
  image: mercury/gitlab-ci-git-push
  script:
    - subrepos/gitlab-ci-git-push/git-push ${GITHUB_REPO} ${CI_BUILD_REF_NAME}

version:
  stage: version
  tags:
    - docker
  image: mercury/tao
  script:
    - git describe --tags --dirty --always --abbrev=8 > version.txt
  artifacts:
    paths:
      - "version.txt"

terraform-validate:
  stage: prepare
  tags:
    - docker
  image: mercury/tao
  script:
    - cd terraform && terraform validate

openstack-vars-validate:
  stage: prepare
  tags:
    - docker
  script:
    - 'test -n "${OS_AUTH_URL}" || (echo "OS_AUTH_URL must be set!"; exit 1)'
    - 'test -n "${OS_TENANT_NAME}" || test -n "${OS_TENANT_ID}" || (echo "OS_TENANT_NAME or OS_TENANT_ID must be set!"; exit 1)'
    - 'test -n "${OS_USERNAME}" || test -n "${OS_USERID}" || (echo "OS_USERNAME or OS_USERID must be set!"; exit 1)'
    - 'test -n "${OS_PASSWORD}" || (echo "OS_PASSWORD must be set!"; exit 1)'
    - '((echo "${OS_AUTH_URL}" | grep -q "v3") && (test -n "${OS_DOMAIN_NAME}" || test -n "${OS_DOMAIN_ID}" || echo "WARNING: OS_DOMAIN_ID or OS_DOMAIN_NAME not set")) || exit 0'

terraform-refresh:
  stage: prepare
  tags:
    - docker
  image: mercury/tao
  script:
    - cd terraform && terraform refresh -backup=- 
  artifacts:
    paths:
      - terraform/terraform.tfstate

terraform-plan:
  stage: plan
  tags:
    - docker
  image: mercury/tao
  script:
    - cd terraform && (terraform graph > plan.dot) && (dot -Tpng < plan.dot > plan.png) && terraform plan -out plan
  artifacts:
    paths:
      - terraform/plan.dot
      - terraform/plan.png
      - terraform/plan
  dependencies:
    - terraform-refresh

terraform-apply:
  stage: apply
  tags:
    - docker
  image: mercury/tao
  script:
    - cd terraform && (terraform graph plan > apply.dot) && (dot -Tpng < apply.dot > apply.png) && terraform apply plan && (terraform output  > output.txt)
  artifacts:
    paths:
      - terraform/apply.dot
      - terraform/apply.png
      - terraform/terraform.tfstate
      - terraform/output.txt
  dependencies:
    - terraform-plan

tfstate-commit:
  stage: commit
  tags:
    - docker
  image: mercury/gitlab-ci-git-push
  script:
    - terraform/scripts/commit-tfstate.sh "ci-tfstate-$(cat version.txt)"
  dependencies:
    - terraform-refresh
    - terraform-apply
    - version
  when: always

