# This script excepts the following Secret Variables to be defined in
# Gitlab project settings:
#  ANSIBLE_VAULT_PASSWORD
#  SSH_PRIVATE_KEY (e.g. "-----BEGIN RSA PRIVATE KEY-----
#                         ...
#                         -----END RSA PRIVATE KEY-----)"
#  DELTA_OS_AUTH_URL
#  DELTA_OS_USERNAME
#  DELTA_OS_PASSWORD
#  EMEDLAB_OS_AUTH_URL
#  EMEDLAB_OS_USERNAME
#  EMEDLAB_OS_PASSWORD
#  EMEDLAB_HTTP_PROXY
variables:
  GITHUB_REPO: "git@github.com:wtsi-hgi/hgi-systems.git"
  GITLAB_REPO: "git@gitlab.internal.sanger.ac.uk:hgi/hgi-systems.git"
  TF_LOG: "" # anything other than "" to trace

before_script:
  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  - ssh-add <(echo "$SSH_PRIVATE_KEY")

  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  - 'export TF_VAR_env=$ENV'
  - 'export TF_VAR_region=$REGION'
  - 'if [[ "$REGION" == "delta-hgi" ]]; then export OS_USERNAME=${DELTA_OS_USERNAME}; export OS_PASSWORD=${DELTA_OS_PASSWORD}; export OS_AUTH_URL=${DELTA_OS_AUTH_URL}; echo "OS vars for delta-hgi set"; fi'
  - 'if [[ "$REGION" == "delta-hgiarvados" ]]; then export OS_USERNAME=${DELTA_OS_USERNAME}; export OS_PASSWORD=${DELTA_OS_PASSWORD}; export OS_AUTH_URL=${DELTA_OS_AUTH_URL}; echo "OS vars for delta-hgiarvados set"; fi'
  - 'if [[ "$REGION" == "emedlab-arvados" ]]; then export OS_USERNAME=${EMEDLAB_OS_USERNAME}; export OS_PASSWORD=${EMEDLAB_OS_PASSWORD}; export OS_AUTH_URL=${EMEDLAB_OS_AUTH_URL}; export HTTP_PROXY=${EMEDLAB_HTTP_PROXY}; export HTTPS_PROXY=${EMEDLAB_HTTP_PROXY}; echo "OS vars for emedlab-arvados set"; fi'

stages:
  - prepare
  - refresh
  - plan
  - apply
  - commit-production-delta-hgi
  - commit-staging-delta-hgi
  - commit-production-delta-hgiarvados
  - commit-staging-delta-hgiarvados
  - commit-production-emedlab-arvados
  - commit-staging-emedlab-arvados
  - sync

version:
  stage: prepare
  tags:
    - docker
  image: quay.io/wtsi-hgi/gitlab-ci-git-push
  script:
    - mkdir -p artifacts
    - git describe --tags --dirty --always --abbrev=8 > "artifacts/version.txt"
  artifacts:
    paths:
      - "artifacts/version.txt"

.production-delta-hgi: &production-delta-hgi-def
  variables:
    ENV: "production"
    REGION: "delta-hgi"
  only:
    - master
    - production-delta-hgi
  
.staging-delta-hgi: &staging-delta-hgi-def
  variables:
    ENV: "staging"
    REGION: "delta-hgi"
  only:
    - develop
    - staging-delta-hgi
  
.production-delta-hgiarvados: &production-delta-hgiarvados-def
  variables:
    ENV: "production"
    REGION: "delta-hgiarvados"
  only:
    - master
    - production-delta-hgiarvados
  
.staging-delta-hgiarvados: &staging-delta-hgiarvados-def
  variables:
    ENV: "staging"
    REGION: "delta-hgiarvados"
  only:
    - develop
    - staging-delta-hgiarvados
  
.production-emedlab-arvados: &production-emedlab-arvados-def
  variables:
    ENV: "production"
    REGION: "emedlab-arvados"
  only:
    - master
    - production-emedlab-arvados
  
.staging-emedlab-arvados: &staging-emedlab-arvados-def
  variables:
    ENV: "staging"
    REGION: "emedlab-arvados"
  only:
    - develop
    - staging-emedlab-arvados
  
.openstack-vars-validate: &openstack-vars-validate-def
  stage: prepare
  tags:
    - docker
  image: quay.io/wtsi-hgi/gitlab-ci-git-push
  script:
    - 'test -n "${OS_AUTH_URL}" || (echo "OS_AUTH_URL must be set!"; exit 1)'
    - 'test -n "${OS_USERNAME}" || test -n "${OS_USERID}" || (echo "OS_USERNAME or OS_USERID must be set!"; exit 1)'
    - 'test -n "${OS_PASSWORD}" || (echo "OS_PASSWORD must be set!"; exit 1)'
    - '((echo "${OS_AUTH_URL}" | grep -q "v3") && (test -n "${OS_DOMAIN_NAME}" || test -n "${OS_DOMAIN_ID}" || echo "WARNING: OS_DOMAIN_ID or OS_DOMAIN_NAME not set")) || exit 0'

.terraform-validate: &terraform-validate-def
  stage: prepare
  tags:
    - docker
  image: quay.io/wtsi-hgi/tao
  script:
    - cd terraform/${REGION} && terraform validate

openstack-vars-validate-production-delta-hgi:
  <<: *openstack-vars-validate-def
  <<: *production-delta-hgi-def
    
openstack-vars-validate-staging-delta-hgi:
  <<: *openstack-vars-validate-def
  <<: *staging-delta-hgi-def
    
openstack-vars-validate-production-delta-hgiarvados:
  <<: *openstack-vars-validate-def
  <<: *production-delta-hgiarvados-def
    
openstack-vars-validate-staging-delta-hgiarvados:
  <<: *openstack-vars-validate-def
  <<: *staging-delta-hgiarvados-def
    
openstack-vars-validate-production-emedlab-arvados:
  <<: *openstack-vars-validate-def
  <<: *production-emedlab-arvados-def
    
openstack-vars-validate-staging-emedlab-arvados:
  <<: *openstack-vars-validate-def
  <<: *staging-emedlab-arvados-def
    
terraform-validate-production-delta-hgi:
  <<: *terraform-validate-def
  <<: *production-delta-hgi-def
    
terraform-validate-staging-delta-hgi:
  <<: *terraform-validate-def
  <<: *staging-delta-hgi-def
    
terraform-validate-production-delta-hgiarvados:
  <<: *terraform-validate-def
  <<: *production-delta-hgiarvados-def
    
terraform-validate-staging-delta-hgiarvados:
  <<: *terraform-validate-def
  <<: *staging-delta-hgiarvados-def
    
terraform-validate-production-emedlab-arvados:
  <<: *terraform-validate-def
  <<: *production-emedlab-arvados-def
    
terraform-validate-staging-emedlab-arvados:
  <<: *terraform-validate-def
  <<: *staging-emedlab-arvados-def
    
.terraform-refresh: &terraform-refresh-def
  stage: refresh
  tags:
    - docker
  image: quay.io/wtsi-hgi/tao
  script:
    - cd "terraform/${REGION}" && ((test \! -e "${ENV}.tfstate" && echo "${ENV}.tfstate does not exist, skipping terraform refresh!") || (terraform refresh -state="${ENV}.tfstate" -backup=- && (terraform show -no-color "${ENV}.tfstate" > "${ENV}.tfstate.txt") && mkdir -p "${CI_PROJECT_DIR}/artifacts/" && cp "terraform/${REGION}/${ENV}.tfstate" "${CI_PROJECT_DIR}/artifacts/" && cp "terraform/${REGION}/${ENV}.tfstate.txt" "${CI_PROJECT_DIR}/artifacts/"))
  artifacts:
    paths:
      - artifacts
    when: always

terraform-refresh-production-delta-hgi:
  <<: *terraform-refresh-def
  <<: *production-delta-hgi-def

terraform-refresh-staging-delta-hgi:
  <<: *terraform-refresh-def
  <<: *staging-delta-hgi-def

terraform-refresh-production-delta-hgiarvados:
  <<: *terraform-refresh-def
  <<: *production-delta-hgiarvados-def

terraform-refresh-staging-delta-hgiarvados:
  <<: *terraform-refresh-def
  <<: *staging-delta-hgiarvados-def

terraform-refresh-production-emedlab-arvados:
  <<: *terraform-refresh-def
  <<: *production-emedlab-arvados-def

terraform-refresh-staging-emedlab-arvados:
  <<: *terraform-refresh-def
  <<: *staging-emedlab-arvados-def

.terraform-plan: &terraform-plan-def
  stage: plan
  tags:
    - docker
  image: quay.io/wtsi-hgi/tao
  script:
    - cp ${CI_PROJECT_DIR}/artifacts/* "terraform/${REGION}/" && rm -rf "${CI_PROJECT_DIR}/artifacts" && cd terraform/${REGION} && terraform plan -state="${ENV}.tfstate" -input=false -out plan && (terraform show -no-color plan > plan.txt) && (terraform graph plan > plan.dot) && (dot -Tpng < plan.dot > plan.png) && mkdir -p "${CI_PROJECT_DIR}/artifacts" && cp terraform/${REGION}/plan.dot "${CI_PROJECT_DIR}/artifacts/" && cp terraform/${REGION}/plan.png "${CI_PROJECT_DIR}/artifacts/" && cp terraform/${REGION}/plan "${CI_PROJECT_DIR}/artifacts/" && cp terraform/${REGION}/plan.txt "${CI_PROJECT_DIR}/artifacts/"
  artifacts:
    paths:
      - artifacts

terraform-plan-production-delta-hgi:
  <<: *terraform-plan-def
  <<: *production-delta-hgi-def
  dependencies:
    - terraform-refresh-production-delta-hgi

terraform-plan-staging-delta-hgi:
  <<: *terraform-plan-def
  <<: *staging-delta-hgi-def
  dependencies:
    - terraform-refresh-staging-delta-hgi

terraform-plan-production-delta-hgiarvados:
  <<: *terraform-plan-def
  <<: *production-delta-hgiarvados-def
  dependencies:
    - terraform-refresh-production-delta-hgiarvados

terraform-plan-staging-delta-hgiarvados:
  <<: *terraform-plan-def
  <<: *staging-delta-hgiarvados-def
  dependencies:
    - terraform-refresh-staging-delta-hgiarvados

terraform-plan-production-emedlab-arvados:
  <<: *terraform-plan-def
  <<: *production-emedlab-arvados-def
  dependencies:
    - terraform-refresh-production-emedlab-arvados

terraform-plan-staging-emedlab-arvados:
  <<: *terraform-plan-def
  <<: *staging-emedlab-arvados-def
  dependencies:
    - terraform-refresh-staging-emedlab-arvados

.terraform-apply: &terraform-apply-def
  stage: apply
  tags:
    - docker
  image: quay.io/wtsi-hgi/tao
  script:
    - cp ${CI_PROJECT_DIR}/artifacts/* "terraform/${REGION}/" && rm -rf "${CI_PROJECT_DIR}/artifacts"
    - (echo "$ANSIBLE_VAULT_PASSWORD" > /tmp/ansible_vault.pw) && cd "terraform/${REGION}" && terraform apply -state="${ENV}.tfstate" -input=false plan && (terraform output -json > output.json) && (terraform show -no-color > "${ENV}.tfstate.txt")
    - mkdir -p "${CI_PROJECT_DIR}/artifacts"
    - cp terraform/${REGION}/${ENV}.tfstate "${CI_PROJECT_DIR}/artifacts/"
    - cp terraform/${REGION}/output.json "${CI_PROJECT_DIR}/artifacts/"
    - cp terraform/${REGION}/${ENV}.tfstate.txt "${CI_PROJECT_DIR}/artifacts/"
  artifacts:
    paths:
      - artifacts
    when: always

terraform-apply-production-delta-hgi:
  <<: *terraform-apply-def
  <<: *production-delta-hgi-def
  dependencies:
    - terraform-plan-production-delta-hgi

terraform-apply-staging-delta-hgi:
  <<: *terraform-apply-def
  <<: *staging-delta-hgi-def
  dependencies:
    - terraform-plan-staging-delta-hgi

terraform-apply-production-delta-hgiarvados:
  <<: *terraform-apply-def
  <<: *production-delta-hgiarvados-def
  dependencies:
    - terraform-plan-production-delta-hgiarvados

terraform-apply-staging-delta-hgiarvados:
  <<: *terraform-apply-def
  <<: *staging-delta-hgiarvados-def
  dependencies:
    - terraform-plan-staging-delta-hgiarvados

terraform-apply-production-emedlab-arvados:
  <<: *terraform-apply-def
  <<: *production-emedlab-arvados-def
  dependencies:
    - terraform-plan-production-emedlab-arvados

terraform-apply-staging-emedlab-arvados:
  <<: *terraform-apply-def
  <<: *staging-emedlab-arvados-def
  dependencies:
    - terraform-plan-staging-emedlab-arvados

.tfstate-commit: &terraform-commit-def
  tags:
    - docker
  image: quay.io/wtsi-hgi/gitlab-ci-git-push
  script:
    - cp "${CI_PROJECT_DIR}/artifacts/${ENV}.tfstate" "terraform/${REGION}/${ENV}.tfstate"
    - gitlab/commit-tfstate.sh "ci-tfstate-$(cat ${CI_PROJECT_DIR}/artifacts/version.txt)" "Changes to ${ENV}.tfstate made by terraform [ci skip]" "terraform/${REGION}/${ENV}.tfstate"
  when: always

terraform-commit-production-delta-hgi:
  <<: *terraform-commit-def
  <<: *production-delta-hgi-def
  stage: commit-production-delta-hgi
  dependencies:
    - version
    - terraform-apply-production-delta-hgi

terraform-commit-staging-delta-hgi:
  <<: *terraform-commit-def
  <<: *staging-delta-hgi-def
  stage: commit-staging-delta-hgi
  dependencies:
    - version
    - terraform-apply-staging-delta-hgi

terraform-commit-production-delta-hgiarvados:
  <<: *terraform-commit-def
  <<: *production-delta-hgiarvados-def
  stage: commit-production-delta-hgiarvados
  dependencies:
    - version
    - terraform-apply-production-delta-hgiarvados

terraform-commit-staging-delta-hgiarvados:
  <<: *terraform-commit-def
  <<: *staging-delta-hgiarvados-def
  stage: commit-staging-delta-hgiarvados
  dependencies:
    - version
    - terraform-apply-staging-delta-hgiarvados

terraform-commit-production-emedlab-arvados:
  <<: *terraform-commit-def
  <<: *production-emedlab-arvados-def
  stage: commit-production-emedlab-arvados
  dependencies:
    - version
    - terraform-apply-production-emedlab-arvados

terraform-commit-staging-emedlab-arvados:
  <<: *terraform-commit-def
  <<: *staging-emedlab-arvados-def
  stage: commit-staging-emedlab-arvados
  dependencies:
    - version
    - terraform-apply-staging-emedlab-arvados

github-sync:
  stage: sync
  tags:
    - docker
  image: quay.io/wtsi-hgi/gitlab-ci-git-push
  script:
    - git checkout origin/master && subrepos/gitlab-ci-git-push/git-push ${GITHUB_REPO} ${CI_BUILD_REF_NAME}
  dependencies: []
